:quit
let f (1:[1,2]) = 2
let f [] = 0
let f True = False;
let f 0 = 2
let f 1 = 1
let f (1:[0, 1]) = 1
f (1:[0, 1]) = 1
f 1 = 1
f True = 1
f (1:[1]) = 1
f 1
f 0
let f 0 = 0
et f 0 = 0
:quit
let f 1 = 1
let f 0 = 0
let f 0 = 0
:quit
let z = [1, 2] ++ [3, 4]
let z = [1, 2] ++ [3, 4]
:type g
let g x = [x, x * 2, x * 3]
:type f
let f x = [x, x] 
:type f x
let f x = [x, x] 
let z = [1, 2] ++ [3, 4] 
:type y
let y = True:[] 
:type w
let w = [];   
let m = ["m", "d"]
let m = [h, d]
let m = [x, y]
:type y
let y = [True, False]
:type x
let x = [1, 2]
let x = [1, 2]
:quit
:type x
let x = 1;
1+2
[1, 2]
[1]
1+2
1+2
[1,2,3]
[]
