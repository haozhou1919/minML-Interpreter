f (x:xs)
let f (x:xs) = 1
let xs = []
let x = 1
f 10
let f x = 2
let f 10 = 5
f 10
let f x = 2
let f 10 = 5
f 10
f 1-
let f x = 1
f 10
let f 10 = 3
f 10
f 1-
let f x = 2
let f 10 = 4
f 10
let f x = 2
let f 10 = 5
f 10
let f x = 2
let f 10 =5
f 10
let f x = 2
let f 10 = 5
f (x:xs)
let f (x:xs) = 1       -- [("f", Lam (PCons "x" "xs") (Lit (LInt 1)))]
let xs = []            -- [("xs", Lit (LArray []))]
let x = 1              -- [("x", Lit (LInt 1))]
f (x:xs)
let f (x:xs) = 1
let xs = []
let x = 1
x
f (x:xs)
f x:xs 
let f (x:xs) = 1
let xs = [];
let x= 1;
f False
let f False = 10
f false
let f false = 10
let f (x:xs) = 1
let f (x:xs) = 1
let f (x:xs) = 1
let f [] = 1;
let f [] = 1;
let f [] = 0;
let f x = [x, x]
let g (x:xs) = 1
let f 1 = 1
let f 0 = 0
let g (x:xs) = 1
let z = [1, 2] ++ [3, 4] 
let g x = [x, x * 2, x * 3]
let f x = [x, x]
let f (x:xs) = 1
let xs = [];
let x = 1;
let f (1:[]) = 1
let f (1:[]) = 1
let f 1:[] = 1
let f 1:[] = 1
let f [] = 0
let f 1 = 1
let x = 1:[]
x = 1:[]
let f 1:[] = 1
x = 1:[]
let f [] = 0
let f (1:[]) = 1
f (1:[]) = 1
f (1:[1,2]) = 1
f (1:[1:2]) = 1
f []
let f [] = 0;
let a = []
let x = [1,2]
:quit
let f (1:[1,2]) = 2
let f [] = 0
let f True = False;
let f 0 = 2
let f 1 = 1
let f (1:[0, 1]) = 1
f (1:[0, 1]) = 1
f 1 = 1
f True = 1
f (1:[1]) = 1
f 1
f 0
let f 0 = 0
et f 0 = 0
:quit
let f 1 = 1
let f 0 = 0
